// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GeniusCode.XtraReports.Designer.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Passing datasources at design time")]
    public partial class PassingDatasourcesAtDesignTimeFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PassingDatasourcesAtDesignTime.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Passing datasources at design time", "In order simplify report creation\r\nAs a user\r\nI want a default root folder to be " +
                    "created for me automatically in my Documents", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Passing Datasource Using Traversal")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void PassingDatasourceUsingTraversal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Passing Datasource Using Traversal", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("The design runtime is ready");
#line 9
 testRunner.And("a datasource exists called DogTime");
#line 10
 testRunner.And("PersonReport exists with a subreport called DogReport in a detail report");
#line 11
 testRunner.And("PersonReport loads the DogTime datasource");
#line 12
 testRunner.And("a new report instance exists");
#line 13
 testRunner.When("A ReportActivatedBySubreportMessage occurs which contains the new report instance" +
                    "");
#line 14
 testRunner.Then("the new report instance\'s datasource should be the first dog of the first person " +
                    "from PersonReport\'s datasource");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Passing Datasource Using 2-Nested Subreports")]
        public virtual void PassingDatasourceUsing2_NestedSubreports()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Passing Datasource Using 2-Nested Subreports", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("The design runtime is ready");
#line 18
 testRunner.And("a datasource exists called DogTime");
#line 19
 testRunner.And("ReportA exists with a subreport called ReportB in a detail report");
#line 20
 testRunner.And("ReportB exists with a subreport called ReportC in a detail report");
#line 21
 testRunner.And("ReportA loads the DogTime datasource");
#line 22
 testRunner.And("the user has activated subreport ReportB inside ReportA");
#line 23
 testRunner.When("the user activates subreport ReportC inside ReportB");
#line 24
 testRunner.Then("ReportC\'s datasource should be the first Toy of the first Dog of the first Person" +
                    " in DogTime");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Activating a Subreport without a Datasource")]
        public virtual void ActivatingASubreportWithoutADatasource()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Activating a Subreport without a Datasource", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("The design runtime is ready");
#line 28
 testRunner.And("ReportA exists with a subreport called ReportB in a detail report");
#line 29
 testRunner.When("the user activates subreport ReportB inside ReportA without a datasource");
#line 30
 testRunner.Then("ReportB should open without a datasource");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
