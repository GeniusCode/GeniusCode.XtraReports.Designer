// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.261
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GeniusCode.XtraReports.Designer.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Making paths to external subreports relative")]
    public partial class MakingPathsToExternalSubreportsRelativeFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RelativePaths.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Making paths to external subreports relative", "In order to avoid silly mistakes\r\nAs a math idiot\r\nI want to be told the sum of t" +
                    "wo numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Selecting report file in the same directory for subreport")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void SelectingReportFileInTheSameDirectoryForSubreport()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Selecting report file in the same directory for subreport", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("Infrastructure is initialized");
#line 9
 testRunner.And("reportA file exists in a folder");
#line 10
 testRunner.And("reportB file exists in the same folder as reportA");
#line 11
 testRunner.And("the container on ReportA contains the full path to ReportB");
#line 12
 testRunner.When("the report is saved");
#line 13
 testRunner.Then("the url on the container should be a relative path, and not absolute");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Selecting report file in a subdirectory for subreport")]
        public virtual void SelectingReportFileInASubdirectoryForSubreport()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Selecting report file in a subdirectory for subreport", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Given("Infrastructure is initialized");
#line 17
 testRunner.And("reportA file exists in a folder");
#line 18
 testRunner.And("reportB file exists in a subdirectory of reportA\'s path");
#line 19
 testRunner.And("the container on ReportA contains the full path to ReportB");
#line 20
 testRunner.When("the report is saved");
#line 21
 testRunner.Then("the url on the container should be a relative path, and not absolute");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Selecting report file out of directory structure for subreport")]
        public virtual void SelectingReportFileOutOfDirectoryStructureForSubreport()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Selecting report file out of directory structure for subreport", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("Infrastructure is initialized");
#line 25
 testRunner.And("reportA file exists in a folder");
#line 26
 testRunner.And("reportB file exists outside of reportA\'s directory structure");
#line 27
 testRunner.And("the container on ReportA contains the full path to ReportB");
#line 28
 testRunner.When("the report is saved");
#line 29
 testRunner.Then("an exception should be thrown");
#line 30
 testRunner.And("container\'s url should not be relative");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
